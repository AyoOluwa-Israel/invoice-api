// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/invoice": {
            "get": {
                "description": "Retrieve all invoice.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoice"
                ],
                "summary": "Get all invoice",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the invoices",
                        "schema": {
                            "$ref": "#/definitions/models.Invoice"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/controllers.response"
                        }
                    },
                    "404": {
                        "description": "Invoice not found",
                        "schema": {
                            "$ref": "#/definitions/controllers.response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/controllers.response"
                        }
                    }
                }
            }
        },
        "/invoice/{id}": {
            "get": {
                "description": "Retrieve an invoice using its unique ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoice"
                ],
                "summary": "Get invoice by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the invoice",
                        "schema": {
                            "$ref": "#/definitions/models.Invoice"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/controllers.response"
                        }
                    },
                    "404": {
                        "description": "Invoice not found",
                        "schema": {
                            "$ref": "#/definitions/controllers.response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/controllers.response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.response": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": true
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "models.CurrencyType": {
            "type": "string",
            "enum": [
                "USD",
                "GBP",
                "EUR",
                "NGN"
            ],
            "x-enum-varnames": [
                "USD",
                "GBP",
                "EUR",
                "NGN"
            ]
        },
        "models.Invoice": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "billing_currency": {
                    "$ref": "#/definitions/models.CurrencyType"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "discount_percentage": {
                    "description": "Items              []Items           ` + "`" + `json:\"items\" gorm:\"default:[]\"` + "`" + `",
                    "type": "number"
                },
                "due_date": {
                    "type": "string"
                },
                "invoice_id": {
                    "type": "string"
                },
                "invoice_number": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.Status"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.Status": {
            "type": "string",
            "enum": [
                "DRAFT",
                "OVERDUE",
                "PAID",
                "PENDING_PAYMENT",
                "CANCELLED"
            ],
            "x-enum-varnames": [
                "DRAFT",
                "OVERDUE",
                "PAID",
                "PENDING_PAYMENT",
                "CANCELLED"
            ]
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
